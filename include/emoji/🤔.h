#include <cassert>
#include <variant>

// Basic Result class
template <class ğŸ—ƒType, class ğŸ’¥Type> class ğŸ¤” {
public:
  ğŸ¤”(ğŸ—ƒType ğŸ—ƒ) : m_ğŸ““(std::move(ğŸ—ƒ)){};
  ğŸ¤”(ğŸ’¥Type ğŸ’¥) : m_ğŸ““(std::move(ğŸ’¥)){};

  bool is_ğŸ’¥() const { return m_ğŸ““.index() == 1; }
  bool is_ğŸ˜Š() const { return m_ğŸ““.index() == 0; }

  ğŸ’¥Type &ğŸ’¥() {
    assert(is_ğŸ’¥());
    return std::get<ğŸ’¥Type>(m_ğŸ““);
  };
  ğŸ—ƒType &ğŸ—ƒ() {
    assert(is_ğŸ˜Š());
    return std::get<ğŸ—ƒType>(m_ğŸ““);
  };

private:
  std::variant<ğŸ—ƒType, ğŸ’¥Type> m_ğŸ““;
};
